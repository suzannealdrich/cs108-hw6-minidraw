// CToolPalette.cp#include "CToolPalette.h"#include "DrawConstants.h"#include "CDrawUtils.h"#include <LGAColorSwatchControl.h>CToolPalette::CToolPalette(LStream *inStream)	: LWindow(inStream) , LListener() {	inStream->ReadData(&mSelectedTool, sizeof(mSelectedTool));}void CToolPalette::FinishCreateSelf() {	UReanimator::LinkListenerToControls(this, this, this->GetPaneID());	SetFrameColor();	SetFillColor();}void CToolPalette::ListenToMessage(MessageT inMessage, void *ioParam) {	switch (inMessage) {	case msg_ArrowTool:	case msg_LineTool:	case msg_RectTool:	case msg_RoundRectTool:	case msg_OvalTool:		if (*(SInt32*)ioParam == Button_On) SetCurrentTool(inMessage);		break;	case msg_FrameChange:		if (!CDrawUtils::EqualRGBColor(mFrameColor, *(RGBColor*)ioParam)) SetFrameColor();		break;	case msg_FillChange:		if (!CDrawUtils::EqualRGBColor(mFillColor, *(RGBColor*)ioParam)) SetFillColor();		break;	} }void CToolPalette::ClickInGoAway(const EventRecord	&inMacEvent){	if (::TrackGoAway(mMacWindowP, inMacEvent.where)) {		Hide();		LDocApplication* theApp = (LDocApplication*)LCommander::GetTopCommander();		theApp->UpdateMenus();	}}int CToolPalette::GetCurrentTool(){	return mSelectedTool;}void CToolPalette::GetFrameColor(RGBColor &outColor) const {	outColor = mFrameColor;}void CToolPalette::GetFillColor(RGBColor &outColor) const {	outColor = mFillColor;}void CToolPalette::SetCurrentTool(SInt32 toolID){	if (toolID != mSelectedTool) mSelectedTool = toolID;}void CToolPalette::SetFrameColor(){	LGAColorSwatchControl* swatch = (LGAColorSwatchControl*) FindPaneByID(kFrameID);	Assert_(swatch);	swatch->GetSwatchColor(mFrameColor);}void CToolPalette::SetFillColor(){	LGAColorSwatchControl* swatch = (LGAColorSwatchControl*) FindPaneByID(kFillID);	Assert_(swatch);	swatch->GetSwatchColor(mFillColor);}