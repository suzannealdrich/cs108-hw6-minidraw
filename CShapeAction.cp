// CShapeAction.cp#include "CShapeAction.h"#include "CShape.h"#include "CCanvas.h"const CommandT	CommandToStringSubtract = (cmd_CreateShape-1);CShapeAction::CShapeAction(CShape* shape, CommandT command, Boolean alreadyDone)  : LAction(kShapeActionUndoStringsID, command - CommandToStringSubtract, alreadyDone){	mShape = shape;	mShape->GetInfo(mOldInfo);	mCommand = command;	mCanvas = (CCanvas*) mShape->GetSuperView();	mClassID = mShape->GetClassInt();}void CShapeAction::RedoSelf(){	switch (mCommand) {		case cmd_SetFrameColor:			mShape->SetFrameColor(mNewColor);			break;					case cmd_SetFillColor:			mShape->SetFillColor(mNewColor);			break;						case cmd_ResizeShape:		case cmd_MoveShape:			mShape->SetStartEnd(mNewStartPt, mNewEndPt);			break;					case cmd_CreateShape:			mShape = mCanvas->CreateShape(mClassID, mOldInfo);			break;					case cmd_DeleteShape:			mCanvas->DeleteShape(mShape);			break;	}}void CShapeAction::SetNewColor(const RGBColor& newColor){	mNewColor = newColor;}void CShapeAction::SetNewStartEnd(Point startPt, Point endPt){	mNewStartPt = startPt;	mNewEndPt = endPt;}void CShapeAction::UndoSelf(){	switch (mCommand) {		case cmd_CreateShape:			mCanvas->DeleteShape(mShape);			break;				case cmd_DeleteShape:			mShape = mCanvas->CreateShape(mClassID, mOldInfo);			break;				default:			mShape->OrientFromInfo(mOldInfo);			break;	}}