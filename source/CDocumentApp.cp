// =================================================================================//	CDocumentApp.cp					©1996-1998 Metrowerks Inc. All rights reserved.// =================================================================================//	This file contains the starter code for a document PowerPlant project////  The Application is derived from LDocApplication.  New Windows are managed//  by CTextDocument which is derived from LSingleDoc.  Each document contains//  a smart text view that remembers if it has changed since it was last saved.#include "CDocumentApp.h"#include <StandardFile.h>#include <LGrowZone.h>#include <PP_Messages.h>#include <PP_Resources.h>#include <PPobClasses.h>#include <UDesktop.h>#include <UDrawingState.h>#include <UMemoryMgr.h>#include <URegistrar.h>#include <UTextTraits.h>#include <UStandardDialogs.h>#include <LWindow.h>#include <LCaption.h>#include <LRadioGroup.h>#include <LGAColorSwatchControl.h>#include "DrawConstants.h"#include "CToolPalette.h"#include "CToolPaletteButton.h"#include "CCanvas.h"#include "CDrawDoc.h"// =================================================================================//		¥ Main Program// ===========================================================================int main(){									SetDebugThrow_(PP_PowerPlant::debugAction_Alert);	// Set Debugging options	SetDebugSignal_(PP_PowerPlant::debugAction_Alert);	PP_PowerPlant::InitializeHeap(3);					// Initialize Memory Manager														// Parameter is number of Master Pointer														// blocks to allocate		PP_PowerPlant::UQDGlobals::InitializeToolbox(&qd);	// Initialize standard Toolbox managers		new PP_PowerPlant::LGrowZone(20000);				// Install a GrowZone function to catch														// low memory situations.	CDocumentApp	theApp;								// create instance of your application	theApp.Run();		return 0;}// ---------------------------------------------------------------------------------//		¥ CDocumentApp// ---------------------------------------------------------------------------------//	ConstructorCDocumentApp::CDocumentApp(){	RegisterClass_(PP_PowerPlant::LWindow);	RegisterClass_(PP_PowerPlant::LCaption);	RegisterClass_(PP_PowerPlant::LGAColorSwatchControl);	RegisterClass_(PP_PowerPlant::LRadioGroup);		RegisterClass_(CToolPalette);	RegisterClass_(CToolPaletteButton);	RegisterClass_(CCanvas);		PP_PowerPlant::PP_StandardDialogs::Load();		// Preload facilities for std dialogs	}// ---------------------------------------------------------------------------------//		¥ ~CDocumentApp// ---------------------------------------------------------------------------------//	DestructorCDocumentApp::~CDocumentApp(){	PP_PowerPlant::PP_StandardDialogs::Unload();	// Clean up after std dialogs}// ---------------------------------------------------------------------------------//		¥ StartUp// ---------------------------------------------------------------------------------//	This function lets you do something when the application starts up//	without a document. For example, you could issue your own new command.voidCDocumentApp::StartUp(){	ObeyCommand( PP_PowerPlant::cmd_New, nil );}// ---------------------------------------------------------------------------//	¥ Initialize// ---------------------------------------------------------------------------//	Last chance to initialize the application before processing eventsvoid CDocumentApp::Initialize(){	SelectOrCreateWindow(kToolPaletteID);	mPalette = (CToolPalette*) PP_PowerPlant::LWindow::FindWindowByID(kToolPaletteID);	Assert_(mPalette);}// ---------------------------------------------------------------------------//	¥ GetPalette// ---------------------------------------------------------------------------//	CToolPalette*CDocumentApp::GetPalette(){	return mPalette;}// ---------------------------------------------------------------------------//		¥ ObeyCommand// ---------------------------------------------------------------------------//	This method lets the application respond to commands like Menu commandsBooleanCDocumentApp::ObeyCommand(	PP_PowerPlant::CommandT	inCommand,	void					*ioParam){	Boolean		cmdHandled = true;	switch (inCommand) {						case cmd_ShowOrHideToolPalette:			DoToggleToolPalette();			break;		default:			cmdHandled = PP_PowerPlant::LDocApplication::ObeyCommand(inCommand, ioParam);			break;	}		return cmdHandled;}// ---------------------------------------------------------------------------//		¥ FindCommandStatus// ---------------------------------------------------------------------------//	This function enables menu commands.voidCDocumentApp::FindCommandStatus(	PP_PowerPlant::CommandT	inCommand,	Boolean					&outEnabled,	Boolean					&outUsesMark,	PP_PowerPlant::Char16	&outMark,	Str255					outName){	switch (inCommand) {						case cmd_ShowOrHideToolPalette:			outEnabled = true;			ResIDT index = (mPalette->IsVisible() ? HIDE_INDEX : SHOW_INDEX);			::GetIndString(outName, kPaletteMenuStringsID, index);			break;		default:			PP_PowerPlant::LDocApplication::FindCommandStatus(inCommand, outEnabled,												outUsesMark, outMark, outName);			break;	}}// ---------------------------------------------------------------------------//	¥ ShowAboutBox// ---------------------------------------------------------------------------//	Display the About Box for the applicationvoidCDocumentApp::ShowAboutBox(){	SelectOrCreateWindow(kAboutBoxID);}// ---------------------------------------------------------------------------------//		¥ OpenDocument// ---------------------------------------------------------------------------------// This method is called when a file is chosen from the StandardFile Open Dialog// File_Menu->Open item.voidCDocumentApp::OpenDocument(	FSSpec	*inMacFSSpec ){	PP_PowerPlant::LDocument	*theDoc = PP_PowerPlant::LDocument::FindByFileSpec(*inMacFSSpec);		// If the document is already open, make it the current document	if (theDoc != nil) {						theDoc->MakeCurrent();			// otherwise, make a new Document	} else {									theDoc = new CDrawDoc(this, inMacFSSpec);	}}// ---------------------------------------------------------------------------------//		¥ MakeNewDocument// ---------------------------------------------------------------------------------// This method creates a new document and installs it into the application's// Apple Event Object Model hierarchy.PP_PowerPlant::LModelObject *CDocumentApp::MakeNewDocument(){	// Make a new empty document.	return new CDrawDoc( this, nil );}// ---------------------------------------------------------------------------------//		¥ ChooseDocument// ---------------------------------------------------------------------------------// This method uses the PowerPlant Standard Dialogs to let the user choose a// document to open.voidCDocumentApp::ChooseDocument(){	PP_PowerPlant::PP_StandardDialogs::LFileChooser	chooser;		if (chooser.AskOpenFile(PP_PowerPlant::LFileTypeList(kDrawDocFileType))) {		AEDescList		docList;		chooser.GetFileDescList(docList);		OpenOrPrintDocList(docList, PP_PowerPlant::ae_OpenDoc);	}}// ---------------------------------------------------------------------------------//		¥ SelectOrCreateWindow// ---------------------------------------------------------------------------------// void CDocumentApp::SelectOrCreateWindow(ResIDT id) {	PP_PowerPlant::LWindow* wind = PP_PowerPlant::LWindow::FindWindowByID(id);		if (wind) {		wind->Select();	} else {		PP_PowerPlant::LWindow* theWindow = PP_PowerPlant::LWindow::CreateWindow(id, this);		ThrowIfNil_(theWindow);		theWindow->Show();	}}// ---------------------------------------------------------------------------------//		¥ DoToggleToolPalette// ---------------------------------------------------------------------------------// void CDocumentApp::DoToggleToolPalette() {	if (mPalette->IsVisible()) {		mPalette->Hide();	} else {		mPalette->Show();	}}